/* tslint:disable */
/* eslint-disable */
/**
 * Skribbl Typo API
 * Skribbl typo admin and auth api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { LobbyPlayerDto } from './LobbyPlayerDto';
import {
    LobbyPlayerDtoFromJSON,
    LobbyPlayerDtoFromJSONTyped,
    LobbyPlayerDtoToJSON,
} from './LobbyPlayerDto';

/**
 * 
 * @export
 * @interface ReportsResponseDto
 */
export interface ReportsResponseDto {
    /**
     * Lobby description
     * @type {string}
     * @memberof ReportsResponseDto
     */
    description: string;
    /**
     * Lobby invite encrypted
     * @type {string}
     * @memberof ReportsResponseDto
     */
    key: string;
    /**
     * Lobby unique id
     * @type {string}
     * @memberof ReportsResponseDto
     */
    iD: string;
    /**
     * Lobby visibility restriction
     * @type {string}
     * @memberof ReportsResponseDto
     */
    restriction: string;
    /**
     * Guild id which the report targets
     * @type {string}
     * @memberof ReportsResponseDto
     */
    guildID: string;
    /**
     * Lobby players
     * @type {Array<LobbyPlayerDto>}
     * @memberof ReportsResponseDto
     */
    players: Array<LobbyPlayerDto>;
}

/**
 * Check if a given object implements the ReportsResponseDto interface.
 */
export function instanceOfReportsResponseDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "key" in value;
    isInstance = isInstance && "iD" in value;
    isInstance = isInstance && "restriction" in value;
    isInstance = isInstance && "guildID" in value;
    isInstance = isInstance && "players" in value;

    return isInstance;
}

export function ReportsResponseDtoFromJSON(json: any): ReportsResponseDto {
    return ReportsResponseDtoFromJSONTyped(json, false);
}

export function ReportsResponseDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReportsResponseDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'description': json['Description'],
        'key': json['Key'],
        'iD': json['ID'],
        'restriction': json['Restriction'],
        'guildID': json['GuildID'],
        'players': ((json['Players'] as Array<any>).map(LobbyPlayerDtoFromJSON)),
    };
}

export function ReportsResponseDtoToJSON(value?: ReportsResponseDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Description': value.description,
        'Key': value.key,
        'ID': value.iD,
        'Restriction': value.restriction,
        'GuildID': value.guildID,
        'Players': ((value.players as Array<any>).map(LobbyPlayerDtoToJSON)),
    };
}

