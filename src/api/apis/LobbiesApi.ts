/* tslint:disable */
/* eslint-disable */
/**
 * Skribbl Typo API
 * Skribbl typo admin and auth api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DropDto,
  LobbiesResponseDto,
  ReportsResponseDto,
} from '../models/index';
import {
    DropDtoFromJSON,
    DropDtoToJSON,
    LobbiesResponseDtoFromJSON,
    LobbiesResponseDtoToJSON,
    ReportsResponseDtoFromJSON,
    ReportsResponseDtoToJSON,
} from '../models/index';

export interface GetLobbyDropsRequest {
    key: string;
}

/**
 * 
 */
export class LobbiesApi extends runtime.BaseAPI {

    /**
     */
    async getAllLobbiesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LobbiesResponseDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lobbies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LobbiesResponseDtoFromJSON));
    }

    /**
     */
    async getAllLobbies(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LobbiesResponseDto>> {
        const response = await this.getAllLobbiesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllReportsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ReportsResponseDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lobbies/reports`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ReportsResponseDtoFromJSON));
    }

    /**
     */
    async getAllReports(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ReportsResponseDto>> {
        const response = await this.getAllReportsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getLobbyDropsRaw(requestParameters: GetLobbyDropsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DropDto>>> {
        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling getLobbyDrops.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/lobbies/{key}/drops`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DropDtoFromJSON));
    }

    /**
     */
    async getLobbyDrops(requestParameters: GetLobbyDropsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DropDto>> {
        const response = await this.getLobbyDropsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
