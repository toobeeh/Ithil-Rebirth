/* tslint:disable */
/* eslint-disable */
/**
 * Skribbl Typo API
 * Skribbl typo admin and auth api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MemberDto,
  MemberSearchDto,
  UpdateDiscordID,
} from '../models/index';
import {
    MemberDtoFromJSON,
    MemberDtoToJSON,
    MemberSearchDtoFromJSON,
    MemberSearchDtoToJSON,
    UpdateDiscordIDFromJSON,
    UpdateDiscordIDToJSON,
} from '../models/index';

export interface FindMembersWildcardSearchRequest {
    content: string;
}

export interface GetMemberByDiscordIDRequest {
    id: string;
}

export interface GetMemberByLoginRequest {
    login: number;
}

export interface UpdateMemberDiscordIDRequest {
    login: number;
    updateDiscordID: UpdateDiscordID;
}

/**
 * 
 */
export class MembersApi extends runtime.BaseAPI {

    /**
     */
    async findMembersWildcardSearchRaw(requestParameters: FindMembersWildcardSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MemberSearchDto>>> {
        if (requestParameters.content === null || requestParameters.content === undefined) {
            throw new runtime.RequiredError('content','Required parameter requestParameters.content was null or undefined when calling findMembersWildcardSearch.');
        }

        const queryParameters: any = {};

        if (requestParameters.content !== undefined) {
            queryParameters['content'] = requestParameters.content;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/members/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MemberSearchDtoFromJSON));
    }

    /**
     */
    async findMembersWildcardSearch(requestParameters: FindMembersWildcardSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MemberSearchDto>> {
        const response = await this.findMembersWildcardSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getMemberByDiscordIDRaw(requestParameters: GetMemberByDiscordIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MemberDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMemberByDiscordID.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/members/discord/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberDtoFromJSON(jsonValue));
    }

    /**
     */
    async getMemberByDiscordID(requestParameters: GetMemberByDiscordIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MemberDto> {
        const response = await this.getMemberByDiscordIDRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getMemberByLoginRaw(requestParameters: GetMemberByLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MemberDto>> {
        if (requestParameters.login === null || requestParameters.login === undefined) {
            throw new runtime.RequiredError('login','Required parameter requestParameters.login was null or undefined when calling getMemberByLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/members/{login}`.replace(`{${"login"}}`, encodeURIComponent(String(requestParameters.login))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberDtoFromJSON(jsonValue));
    }

    /**
     */
    async getMemberByLogin(requestParameters: GetMemberByLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MemberDto> {
        const response = await this.getMemberByLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateMemberDiscordIDRaw(requestParameters: UpdateMemberDiscordIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MemberDto>> {
        if (requestParameters.login === null || requestParameters.login === undefined) {
            throw new runtime.RequiredError('login','Required parameter requestParameters.login was null or undefined when calling updateMemberDiscordID.');
        }

        if (requestParameters.updateDiscordID === null || requestParameters.updateDiscordID === undefined) {
            throw new runtime.RequiredError('updateDiscordID','Required parameter requestParameters.updateDiscordID was null or undefined when calling updateMemberDiscordID.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/members/{login}/discord`.replace(`{${"login"}}`, encodeURIComponent(String(requestParameters.login))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDiscordIDToJSON(requestParameters.updateDiscordID),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberDtoFromJSON(jsonValue));
    }

    /**
     */
    async updateMemberDiscordID(requestParameters: UpdateMemberDiscordIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MemberDto> {
        const response = await this.updateMemberDiscordIDRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
